dotnet --info

HELP
--------------
dotnet -h
dotnet new -h
dotnet sln -h

INFO
----------
dotnet new list

SSL Certificate - Optional
-------------------------------------
dotnet dev-certs https --trust
(OR)
dotnet dev-certs https --clean

COMMANDS
------------------
1) dotnet new sln --> Create new empty solution.
2) dotnet new webapi -n API --use-controllers --> Create new WebApi project
3) dotnet sln add API --> Add API project to solution
4) dotnet sln list --> To see the list of projects in solution

Migration
---------------------
dotnet tool install dotnet-ef -g
dotnet tool update dotnet-ef -g

dotnet ef migrations add Initial -o Data/Migrations
 
With Start up project
dotnet ef migrations add "Initial" -o Data/Migrations  -s ../RTBooking.Api

Note - For second migration, specfifying output folder (-o) is not required

GIT
----------------------------
dotnet new gitignore

GIT terminal with branch name - DatingApp (main)
https://ohmyz.sh/

Angular
-----------------
npm i -g @angular/cli
npm install -g @angular/cli @angular/core
ng version

To target older browser, then we need change in compilerOptions --> "target" setting in tsconfig.json

VS Code
--------
Settings-->Search for "bracket", "auto close"
Enable auto close - Brackets, Comments, Quotes in Settings

SSL
----------------
mkcert-
https://github.com/FiloSottile/mkcert
From admin command prompt,
1.Install mkcert. (>choco install mkcert) - (Software installed to 'C:\ProgramData\chocolatey\lib\mkcert')
2.Create a locally trusted CA with >mkcert -install.
3.Create a folder "ssl" under angular project directory "DatingApp/client/ssl"
4.Generate an SSL certificate with >mkcert localhost. 
5.In angular.json, add ssl details under serve-->options.
    "serve": {
          "options": {
            "ssl": true,
            "sslCert": "./ssl/localhost.pem",
            "sslKey": "./ssl/localhost-key.pem"
          },

Hot-Reload Disable 
-------------
dotnet watch --no-hot-reload
Properties/launchsettings.json --> "hotReloadEnabled": false   --> This doesn't disable Hot reload

Debugging
---------------
If launch.json & tasks.json files which is available in .vscode folder are not available, then
In command palette, search for .net --> Generate Assets for Build and Debug
---Two Profiles
.NET Core Launch (web) - Need to stop the running app and then launch
.NET Core Attach - Attach to existing debugger

Controller Argument Mapping
-------------------------------
Json body is an object, so it will not automatically match with plain string arguments in controller's action method.
--Request body:
{
	"username": "bob",
	"password": "password"
}
--Controller:
[HttpPost("register")]   
public async Task<ActionResult<AppUser>> Register(string username,string password){

} 
In above action method, we can send arguments as queryString - Example: {{url}}/api/account/register?username=sam&password=password
There can be only one "[RequestBody]" we can mentioned in parameter

DTO
------------------
We need to use DTO to map the JSON object from the request.

[ApiController]
------------------
--Mapping
It is responsible for automapping Json Object from request to DTO Mapping in action method. Without "ApiController", we need to specify [FromBody] to match to work.

--Validation
It does the validation specified in DTO (data annotation) before reaching the controller's action method. Without "ApiController" then we need to check the property "ModelState" which contains the error details for manual validation

AUTH
---------------
For better password storage in db use, Hash + Salt
--Register
    using var hmac = new HMACSHA512();
    var user = new AppUser{
        UserName = registerDto.Username.ToLower(),
        PasswordHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(registerDto.Password)),
        PasswordSalt = hmac.Key
    };
--Login
    using var hmac = new HMACSHA512(user.PasswordSalt);
    var computedHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(loginDto.Password));
    for (int i = 0; i < computedHash.Length; i++)
    {
        if(computedHash[i]!=user.PasswordHash[i]) return Unauthorized("Invalid Password");
    }

JWT
--------------------------------------------------------------------------------------------------------------------
--Package - System.IdentityModel.Tokens.Jwt 

  Symmetric Encryption - Same Private Key for encryption and decryption.
  PlainText --> SymmetricKey(123) --> Cipher Text --> SymmetricKey(123) --> PlainText
  Faster, Smaller, Good for Large amount of data, Higher chance of compromise

  Asymmetric Encryption - Public Key for encryption and Private Key for decryption.
  PlainText --> PublicKey(123) --> Cipher Text --> PrivateKey(456) --> PlainText
  Slower, Longer, Good for Smaller Transaction (https), More Secure than Symmetric

--Steps for Creating JWT Token
  1) Symmetric Key
  2) Signining Credential - (Key + Algorithm)
  3) Claims List - If any
  4) var token = JwtSecurityToken({issuer, audience,claim,expdt,signingCredentials})
  5) JwtSecurityTokenHander().writeToken(token)

--Package - Microsoft.AspNetCore.Authentication.JwtBearer (For provide authentication scheme in Program.cs)

--Authentication & Authorization Middleware
    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
      .AddJwtBearer(opt=>opt.TokenValidationParameters = new TokenValidationParameters
      {
          ValidateIssuerSigningKey = true,
          IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"])),
          ValidateIssuer = true,
          ValidateAudience = true
      });

    var app = builder.Build();
    app.UseAuthentication(); // Do you have valid token? 
    app.UseAuthorization(); // Ok, you have a valid token, what are you allowed to do?

----Example:
    In Night club. Person with valid Identity card entering - Authentication
    But age is lesser than 18, so not authorized - Authorization
--------------------------------------------------------------------------------------------------------------------
--Angular
>ng g --help
>ng g c nav --dry-run  (Showing what files will be created)
>ng g c nav --skip-tests --dry-run
----------------------------------------------------ANGULAR FORMS-----------------------
#### Template Form (NG Form) - FormsModule
    <form #loginForm1="ngForm" (ngSubmit)="onSubmitHandler1()" class="d-flex" autocomplete="off">
        <input class="form-control me-2" type="text" placeholder="Username" name="UserName" [(ngModel)]="model.UserName">
        <input class="form-control me-2" type="password" placeholder="Password" name="Password" [(ngModel)]="model.Password" >
        <button class="btn btn-outline-success" type="submit" [disabled]="!loginForm1.valid">Login</button>
      </form>
    model: any = {};
    onSubmitHandler1(){
      console.log(this.model);    
    }

#### Reactive Form (Form Group) - ReactiveFormsModule
    <form [formGroup]="loginForm" (ngSubmit)="onSubmitHandler()" class="d-flex" autocomplete="off">
        <input class="form-control me-2" type="text" placeholder="Username" formControlName="UserName">
        <input class="form-control me-2" type="password" placeholder="Password" formControlName="Password" >
        <button class="btn btn-outline-success" type="submit" [disabled]="!loginForm.valid">Login</button>
      </form>
      loginForm!: FormGroup;
      formBuilder = inject(FormBuilder)
      ngOnInit(): void {
        this.loginForm = this.formBuilder.group({
          UserName: ['',Validators.compose([Validators.required, Validators.minLength(3)])], 
          Password: ['',Validators.compose([Validators.required])], 
        })
      }

      onSubmitHandler(){
        console.log(this.loginForm.value);    
      }
----------------------------------------------------END ANGULAR FORMS----------------------------------------------
LOCAL storage
-------------------------------------
--SET - Convert user object to string using JSON.strinify()
    localStorage.setItem('user', JSON.stringify(user))
    
--GET - Convert string to object using JSON.parse()
    const user: User = JSON.parse(localStorage.getItem('user')!);

-------------------------------------
Observables & RxJS (Reactive Extension Java Script)
---------------------
pipe - Used to transform the data before it pass it to subscribers. (chain a pipe and add many functions)
--Example: To return only member id instead of complete user details.
  getMembers(){
      return this.httpClient.get<{id: string}>('api/users').pipe(
        map(members=>{
          return members.id;
        })
      )
    }
--Async Pipe (|) -- Used to subscribe and unsubscribe automatically from the Observables.

Observable vs Subject vs Behavior Subject

--Observable
Read-Only, can't emit values, subscribers cannot receive value after subscription.
obs = new Observable() 
of(1,2,3)

--Subject
Can emit events/values to its subscribers using next(), but subscribes get only latest emitted values. Previous emitted values before subscription are not available.
  --Sample CODE
  subj = new Subject(); 
  ngOnInit(): void {    
    this.subj.next("Value 0")
    this.subj.subscribe(res=>console.log(res));
    this.subj.next("Value 1")
    this.subj.next("Value 2") 
  }
  Output: 
  Value 1
  Value 2

--Behavior Subject
Can emit events/values, subscribes get previous and latest emitted values.
  --Sample CODE
  bevSubj = new BehaviorSubject("BValue -1");
  ngOnInit(): void {    
    this.bevSubj.next("BValue 0")
    this.bevSubj.subscribe(res=>console.log(res));
    this.bevSubj.next("BValue 1")
    this.bevSubj.next("BValue 2")
  }
  Output:
  BValue 0
  BValue 1
  BValue 2

--------------------------------------------------------------------------------------------------------------------
DATA SEED
----------------------------------------

GetService - returns null if the service is not registered
GetRequiredService - throws an Exception if the service is not registered

  using var scope = app.Services.CreateScope();
  var service = scope.ServiceProvider;
  try
  {
      var context = service.GetRequiredService<DataContext>();
      await context.Database.MigrateAsync();
      if(!context.Users.Any()){
          await Seed.SeedUsers(context);
      }    
  }
  catch (Exception ex)
  {    
      var logger = service.GetService<ILogger<Program>>();
      logger.LogError(ex,ex.Message);    
  }

  namespace API.Data
  {
      public class Seed
      {
          public static async Task  SeedUsers(DataContext context)
          {
              if(await context.Users.AnyAsync()) return;

              var userData = await File.ReadAllTextAsync("Data/UserSeedData.json");
              var options = new JsonSerializerOptions{PropertyNameCaseInsensitive = true};
              var users = JsonSerializer.Deserialize<List<AppUser>>(userData,options);
              foreach (var user in users)
              {
                  using var hmac = new HMACSHA512();
                  user.UserName = user.UserName.ToLower();
                  user.PasswordHash = hmac.ComputeHash(Encoding.UTF8.GetBytes("Pa$$w0rd"));
                  user.PasswordSalt = hmac.Key;
                  context.Users.Add(user);
              }
              await context.SaveChangesAsync();
          }
      }
  }
  --------------------------------------------------------------------------------------------------------------------
  